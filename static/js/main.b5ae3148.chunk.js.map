{"version":3,"sources":["slices/id.ts","slices/is-name-visible.ts","api/swapi.ts","store.ts","App.tsx","index.tsx"],"names":["id","createSlice","name","initialState","reducers","inc","state","dec","set","action","payload","actions","isNameVisible","show","hide","toggle","starWarsAPI","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","x","getOnePeopleByID","query","useGetOnePeopleByIDQuery","store","configureStore","reducer","person","showName","middleware","getDefaultMiddleware","concat","App","dispatch","useDispatch","isNameShow","useSelector","onePeople","String","isError","isFetching","data","console","log","className","onClick","disabled","Math","ceil","random","ReactDOM","render","document","getElementById"],"mappings":"wMAYaA,EAAKC,YAAY,CAC5BC,KAAM,KACNC,aAPkC,CAChCH,GAAI,EACJE,KAAM,WAMRE,SAAU,CACRC,IAAK,SAACC,GACFA,EAAMN,GAAKM,EAAMN,GAAK,GAAKM,EAAMN,GAAK,EAAI,IAE9CO,IAAK,SAACD,GACFA,EAAMN,GAAKM,EAAMN,GAAK,EAAIM,EAAMN,GAAK,EAAI,GAE7CQ,IAAK,SAACF,EAAOG,GACTH,EAAMN,GAAKS,EAAOC,SAEtBR,KAAM,SAACI,EAAOG,GACVH,EAAMJ,KAAOO,EAAOC,Y,EAKKV,EAAGW,QAArBN,E,EAAAA,IAAKE,E,EAAAA,IAAKC,E,EAAAA,IAEVR,IAAf,QCvBaY,EAAgBX,YAAY,CACvCC,KAAM,WACNC,aANkC,CAChCS,eAAe,GAMjBR,SAAU,CACRS,KAAM,SAACP,GACHA,EAAMM,eAAgB,GAE1BE,KAAM,SAACR,GACHA,EAAMM,eAAgB,GAE1BG,OAAQ,SAACT,GACLA,EAAMM,eAAiBN,EAAMM,kB,EAKCA,EAAcD,QAArCE,E,EAAAA,KAAMC,E,EAAAA,KAAMC,E,EAAAA,OAEZH,IAAf,Q,eCzBaI,EAAcC,YAAU,CACnCC,YAAa,cACbC,UAAWC,YAAe,CAAEC,QAAS,2BACrCC,UAAW,SAACC,GAAD,MAAQ,CACjBC,iBAAkBD,EAAEE,MAAyB,CAC3CA,MAAO,SAACzB,GAAD,uBAAkBA,UAKhB0B,EAA6BV,EAA7BU,yBCRFC,EAAQC,YAAe,CAChCC,QAAQ,aACJC,OAAQ9B,EACR+B,SAAUnB,GACTI,EAAYE,YAAcF,EAAYa,SAE3CG,WAAY,SAACC,GAAD,OACRA,IAAuBC,OAAOlB,EAAYgB,e,eC0CnCG,EA5CC,WAAO,IAAD,EAGZC,EAAWC,cAEXC,EAAaC,aAAY,SAACjC,GAAD,OAAsBA,EAAMyB,SAASnB,iBAK9DZ,EAAKuC,aAAY,SAACjC,GAAD,OAAsBA,EAAMwB,OAAO9B,MAKpDwC,EAAYd,EAAyBe,OAAOzC,IAC1C0C,EAAwBF,EAAxBE,QAASC,EAAeH,EAAfG,WACXzC,GAAO,UAAAsC,EAAUI,YAAV,eAAgB1C,OAAQ,UAIrC,OAFA2C,QAAQC,IAAIJ,EAASC,EAAYzC,GAE1B,gCACH,6BAEQoC,EACII,EAAU,6CACVC,EAAa,sBAAMI,UAAU,WAC7B7C,EAEJ,8CAGR,wBAAQ8C,QA1BW,kBAAMZ,EAASvB,MA0BlC,kBACA,wBAAQmC,QA1BW,kBAAMZ,EAAStB,MA0BlC,kBACA,wBAAQkC,QA1Ba,kBAAMZ,EAASrB,MA0BpC,oBACA,uBACA,uBACA,uBACA,wBAAQkC,SAAkB,IAAPjD,EAAWgD,QA3BX,kBAAMZ,EAAS7B,MA2BlC,kBACA,wBAAQ0C,SAtCA,KAsCWjD,EAAYgD,QA3BZ,kBAAMZ,EAAS/B,MA2BlC,kBACA,wBAAQ2C,QA3Ba,kBAAMZ,EAAS5B,EAAI0C,KAAKC,KAZrC,GAY0CD,KAAKE,aA2BvD,wBC5CRC,IAASC,OACL,cAAC,aAAD,UACI,cAAC,IAAD,CAAU3B,MAAQA,EAAlB,SACI,cAAC,EAAD,QAGR4B,SAASC,eAAe,W","file":"static/js/main.b5ae3148.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\ninterface StarWarsState {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nconst initialState: StarWarsState = {\r\n    id: 1,\r\n    name: 'no name'\r\n}\r\n\r\nexport const id = createSlice({\r\n  name: 'id',\r\n  initialState,\r\n  reducers: {\r\n    inc: (state) => {\r\n        state.id = state.id < 15 ? state.id + 1 : 15;\r\n    },\r\n    dec: (state) => {\r\n        state.id = state.id > 1 ? state.id - 1 : 1;\r\n    },\r\n    set: (state, action: PayloadAction<number>) => {\r\n        state.id = action.payload\r\n    },\r\n    name: (state, action: PayloadAction<string>) => {\r\n        state.name = action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const { inc, dec, set } = id.actions\r\n\r\nexport default id.reducer","import { createSlice } from '@reduxjs/toolkit'\r\n\r\ninterface StarWarsState {\r\n    isNameVisible: boolean\r\n}\r\n\r\nconst initialState: StarWarsState = {\r\n    isNameVisible: true\r\n}\r\n\r\nexport const isNameVisible = createSlice({\r\n  name: 'starWars',\r\n  initialState,\r\n  reducers: {\r\n    show: (state) => {\r\n        state.isNameVisible = true;\r\n    },\r\n    hide: (state) => {\r\n        state.isNameVisible = false;\r\n    },\r\n    toggle: (state) => {\r\n        state.isNameVisible = !state.isNameVisible;\r\n    }\r\n  },\r\n})\r\n\r\nexport const { show, hide, toggle } = isNameVisible.actions\r\n\r\nexport default isNameVisible.reducer","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport { OnePeople } from './types'\r\n\r\nexport const starWarsAPI = createApi({\r\n  reducerPath: 'starWarsAPI',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://swapi.dev/api/' }),\r\n  endpoints: (x) => ({\r\n    getOnePeopleByID: x.query<OnePeople, string>({\r\n      query: (id) => `people/${id}`,\r\n    }),\r\n  }),\r\n})\r\n\r\nexport const { useGetOnePeopleByIDQuery } = starWarsAPI","import { configureStore } from '@reduxjs/toolkit';\r\nimport id from './slices/id';\r\nimport isNameVisible from './slices/is-name-visible';\r\nimport { starWarsAPI } from './api/swapi';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        person: id,\r\n        showName: isNameVisible,\r\n        [starWarsAPI.reducerPath]: starWarsAPI.reducer,\r\n    },\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware().concat(starWarsAPI.middleware),\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import { FC } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { dec, inc, set } from \"./slices/id\";\r\nimport { hide, show, toggle } from \"./slices/is-name-visible\";\r\nimport './main.css';\r\nimport { RootState } from \"./store\";\r\nimport { useGetOnePeopleByIDQuery } from \"./api/swapi\";\r\n\r\n\r\n\r\nconst App: FC = () => {\r\n    const MAX = 15;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isNameShow = useSelector((state: RootState) => state.showName.isNameVisible);\r\n    const onShowBtnClick = () => dispatch(show());\r\n    const onHideBtnClick = () => dispatch(hide());\r\n    const onToggleBtnClick = () => dispatch(toggle());\r\n\r\n    const id = useSelector((state: RootState) => state.person.id);\r\n    const onPrevBtnClick = () => dispatch(dec());\r\n    const onNextBtnClick = () => dispatch(inc());\r\n    const onRandomBtnClick = () => dispatch(set(Math.ceil(Math.random() * MAX)));\r\n\r\n    const onePeople = useGetOnePeopleByIDQuery(String(id));\r\n    const { isError, isFetching } = onePeople;\r\n    const name = onePeople.data?.name || 'no name';\r\n\r\n    console.log(isError, isFetching, name);\r\n\r\n    return <div>\r\n        <h1>\r\n            {\r\n                isNameShow ? (\r\n                    isError ? <>error</> :\r\n                    isFetching ? <span className='loader'></span> :\r\n                    name\r\n                ) :\r\n                <>&nbsp;</>\r\n            }\r\n        </h1>\r\n        <button onClick={ onShowBtnClick }>show</button>\r\n        <button onClick={ onHideBtnClick }>hide</button>\r\n        <button onClick={ onToggleBtnClick }>toggle</button>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <button disabled={ id === 1 } onClick={ onPrevBtnClick }>prev</button>\r\n        <button disabled={ id === MAX }onClick={ onNextBtnClick }>next</button>\r\n        <button onClick={ onRandomBtnClick }>random</button>\r\n    </div>;\r\n}\r\n\r\nexport default App;\r\n","import { Provider } from 'react-redux';\r\nimport { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { store } from './store';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <StrictMode>\r\n        <Provider store={ store }>\r\n            <App />\r\n        </Provider>\r\n    </StrictMode>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}